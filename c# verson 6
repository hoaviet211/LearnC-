* Static imports
* Exception filters
* Auto-property initializers
* Expression bodied members
* Null propagator
* String interpolation
* nameof operator
1 Static import:
	access without specifying a type name 
	using System;
	public double Area
   	{
      		get { return Math.PI * Math.Pow(Radius, 2); }
   	}
	----
	using System;
	using static System.Math;
	public double Area
	{
	      get { return PI * Pow(Radius, 2); }
	}
2 Exception filters
	You can use the when contextual keyword to specify a filter condition in the following contexts:
	In the catch statement of a try/catch or try/catch/finally block.
	In the case label of a switch statement.
	In the switch expression.
	try
        {
            var responseText = await streamTask;
            return responseText;
        }
        catch (HttpRequestException e) when (e.Message.Contains("301"))
        {
            return "Site Moved";
        }
	-------------------just >=c#7.0
	switch (obj)
      {
         case Shape shape when shape.Area == 0:
            Console.WriteLine($"The shape: {shape.GetType().Name} with no dimensions");
            break;
	}	
3 Auto-property initializers
-Could intitial a value for property in the class 
pulic class A{
	public string Name {get;set}="Name example"
}
- use single expresstion and is readonly property.
public class Person
{
    public string FirstName
    {
        get => firstName;
        set => firstName = value;
    }
    private string firstName;
    // remaining implementation removed from listing
}
